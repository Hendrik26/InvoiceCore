@startuml
participant ":CommandHandler" as CoHa
participant ":Repository" as Repo
participant "agg:AggregateRoot" as AgRt
participant ":EventStore" as EvSt
participant "stream:DomainEvents" as DoEv
-> CoHa
activate CoHa
	CoHa -> Repo: load(:IdentifiesAggregate)
	activate Repo
		Repo -> EvSt: listEventsForId(:IdentifiesAggregate)
		activate EvSt
			Repo <-- EvSt: :DomainEvent[]
		deactivate EvSt
		Repo -> AgRt: reconstituteFrom(:AggregateHistory)
		activate AgRt
			loop
				AgRt -> AgRt: apply(:DomainEvent)
				activate AgRt
				deactivate AgRt
			end
			Repo <-- AgRt: agg
		deactivate AgRt
		CoHa <-- Repo: agg
	deactivate Repo
	CoHa -> AgRt
		activate AgRt
		loop
			AgRt -> AgRt: recordThat(:Serializable)
			activate AgRt
				AgRt -> AgRt: apply(:DomainEvent)
				activate AgRt
				deactivate AgRt
			deactivate AgRt
		end
		deactivate AgRt
	CoHa -> Repo: save(agg)
deactivate CoHa
activate Repo
	Repo -> AgRt: getRecordedEvents()
	activate AgRt
		AgRt -> DoEv: <<create>>(:DomainEvent[])
		activate DoEv
			AgRt <-- DoEv: stream
		deactivate DoEv
		Repo <-- AgRt: stream
	deactivate AgRt
	Repo -> DoEv: toArray()
	activate DoEv
		Repo <-- DoEv: :DomainEvent[]
	deactivate DoEv
	Repo -> EvSt: append(:DomainEvent[])
deactivate Repo
activate EvSt
deactivate EvSt
@enduml
